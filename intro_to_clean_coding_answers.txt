1. In your own words, explain what clean code is and why it is important.

	A: Clean code is code that can easily be read and maintained. It is
	important, especially when working with others, so that people are able
	to easily read and update your code.

2. Read this article about Toyota and their use of bad code. Although you may not
yet understand all of the topics discussed, think about another commonly used object
that relies on computers and explain what would happen if the code was not created
to acceptable standard.

	A: A commonly used object that relies on computers would be the water heater.
	If the coded preset microprocessor that monitors the temperature and pressure 
	isn't working correctly, the water temperature can be too cold or too hot.

3. Would you consider the following to be clean code? Explain why or why not. 
If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

	A: I would consider not consider this to be clean code.
	FUNCTION convertTemperature(degrees, scale)
	 IF scale ="F" THEN
	 SET temperature to (degrees-32) * (5/9)
	 PRINT temperature
	 ELSE IF scale = "C" THEN
	 SET temperature to degrees * 1.8000 + 32.00
	 PRINT temperature
	 END IF
 	END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not,
refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

	A: I would consider this to be clean code.

5. Using pseudocode, refactor the code for the following examples using the principles
you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives
payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate +
       (subTotal * tax)
   END IF
END FUNCTION

	A: Refactored Code
	
	FUNCTION getTotal(subTotal, discountRate)
          PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
	END FUNCTION

	FUNCTION getPayment(subTotal, discountRate, paymentType)
	  IF paymentType = 'CASH' THEN
            CALL getPayment RETURNING amount
            PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
          ELSE IF paymentType = 'CREDIT CARD' THEN
            CALL getPayment RETURNING amount
            PRINT "Your credit card has been charged: " + subTotal * discountRate + 
	    (subTotal * tax)
          END IF
        END FUNCTION

b. The following function checks out a book if there are no issues with the guest's 
account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

	A: Refactored Code
	FUNCTION checkoutBook(book, guest)
	  IF guest.accountActive AND guest.outstandingFees = 0 THEN 
	    APPEND book to guest.books
	    SET book.status to "Checked Out"
	    PRINT "Your books have been issued."
	  END IF
	  ELSE 
	    PRINT "Unable to checkout book."
	  END FUNCTION 

c. The following class is a code snippet that should support the 
transactions a customer can perform at the ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

	A: Refactored Code
	CLASS BankAccountOptions

 	  FUNCTION displayBalance
    	    PRINT balance
 	  END FUNCTION

 	  FUNCTION deposit(amount)
    	    SET balance to balance + amount
 	  END FUNCTION

 	  FUNCTION withdraw(amount)
     	    IF balance > amount THEN
       	      SET balance to balance - amount
     	    END
 	  END FUNCTION
	 
	CLASS BankOffers
		
 	  FUNCTION creditCardOffers
     	    IF NOT(customer.hasCreditCard) THEN
              CALL offerCreditCard
     	    END
 	  END FUNCTION

 	FUNCTION checkStatus
     	  IF NOT(customer.hasCheckingAccount) THEN
           CALL offerCheckingAccount
     	  END
 	END FUNCTION

	....
 	....
 	....

	END
	

Programming Questions

6. Given an array of integers, find out whether the sum of the integers is a 
perfect square. If it is a perfect square, return the square root, otherwise return
the sum.

	A:
	function squareRoot(Array){
  	  let total = 0;
  	  let sum = Array.reduce((total, sum) => total + sum);
  	  if(Math.sqrt(sum) % 1 === 0){
    	    return Math.sqrt(sum);
  	  }
  	  else return sum;
	}
7. Given an array of integers, find out whether the array contains any duplicate 
elements. The function should return true if any value appears at least twice in the array,
and false if every element is distinct.

	A:
	function isDuplicate(Array){
  	  for(let i = 0; i < Array.length; i++){
    	    if(Array[i] === Array[i + 1]){
      	      return true;
    	    }
  	   }
  	  return false;
	 }


